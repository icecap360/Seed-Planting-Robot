$ git diff (unstaged vs staged), git diff --staged (staged vs commit)
$ git rm <filename>, --cached option to keep the file on your hard drive but not have Git track it anymore.
$ git mv file_from file_to
$ git log, -p to see differences, -2 to see last 2, --stat, --name-only, --grep, -- <file/directory>, -S <cmmots that touch this string>, $ git log --pretty=oneline, $ git log --pretty=format:"%h - %an, %ar : %s"
$ git commit --amend, only adds staging area
$ git remote -v, If you’ve cloned your repository, you should at least see origin — that is the default name Git gives to the server you cloned from.
    You can also specify -v, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote:
$ git remove add <name of remote> <url>
$ git fetch <name of remote> , The command goes out to that remote project and pulls down all the data from that remote project that you don’t have yet. After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time (still have to merge branches)
$ git push <remote> <branch>
$ git remote show origin
To see where various branchs are, use $ git log --oneline

Unstage a staged file: $ git reset HEAD CONTRIBUTING.md  OR $ git restore --staged CONTRIBUTING.md

Background
A branch in Git is simply a lightweight movable pointer to one of these commits. 
HEAD: which branch you are currently on 